var ap={REVISION:"1"};ap.ready=!1,ap.simSize,ap.shaders={},ap.clips={},ap.imported={},ap.BLEND={},ap.BLEND.OFF=0,ap.BLEND.Add=1,ap.BLEND.Subtract=2,ap.BLEND.Darkest=3,ap.BLEND.Lightest=4,ap.BLEND.Difference=5,ap.BLEND.Exclusion=6,ap.BLEND.Multiply=7,ap.BLEND.Screen=8,ap.BLEND.Overlay=9,ap.BLEND.HardLight=10,ap.BLEND.SoftLight=11,ap.BLEND.Dodge=12,ap.BLEND.Burn=13,ap.BLEND.LinearBurn=14,ap.BLEND.LinearLight=15,ap.BLEND.VividLight=16,ap.BLEND.PinLight=17,ap.BLEND.Fx=1,ap.BLENDS=["Add","Substract","Darkest","Lightest","Difference","Exclusion","Multiply","Screen","Overlay","HardLight","SoftLight","Dodge","Burn","LinearBurn","LinearLight","VividLight","PinLight"],ap.PORT_TYPE_OFF=0,ap.PORT_TYPE_KINET_1=1,ap.PORT_TYPE_KINET_2=2,ap.PORT_TYPE_KINET_3=3,ap.PORT_TYPE_KINET_4=4,ap.PORT_TYPE_DMX_1=5,ap.PORT_TYPE_DMX_2=6,ap.PORT_TYPE_DMX_3=7,ap.PORT_TYPE_LASER_1=8,ap.CHANNEL_TYPE_OFF=0,ap.CHANNEL_TYPE_ADD=1,ap.CHANNEL_TYPE_FX=2,ap.CHANNEL_TYPE_SCENE=3,ap.HARDWAREGROUP_OFF=0,ap.HARDWAREGROUP_SOLO=1,ap.HARDWAREGROUP_EXCLUDE=2,ap.MAP_NORMAL=0,ap.MAP_ALT1=1,ap.MAP_ALT2=2,ap.demoClipNames=["TestFrame","SolidColor","ColorSineBar","ColorSwirls","LineCosSin","SimpleSwirl","SinSpiral","SineParticles","DiSinSwirl","HexifyRadial","SinCosTan"],ap.demoHardware=["ApHardwareTest","Grid+zLayer","RanZGrid"],ap.getVariableTypeFromShorthand=function(e){var a;switch(e){case"i":a="int";break;case"f":a="float";break;case"t":a="sampler2D";break;case"v2":a="vec2";break;case"v3":a="vec3";break;case"v4":a="vec4"}return a},ap.speed=.07,ap.useTransforms=!1,ap.usePodUniforms=!1,ap.pointCloud={},ap.pointGeometry={},ap.pointMaterial={},ap.material=!1,ap.init=function(e,a,t){var i=0;for(var r in ap.clips)ap.clips.hasOwnProperty(r)&&(ap.clips[r].id=i,i++);for(t=t||Math.pow(128,2),ap.simSize=4;Math.pow(ap.simSize,2)<t;)ap.simSize*=2;ap.ports=new ap.PortManager,ap.hardware=new ap.HardwareManager,ap.channels=new ap.ChannelManager,ap.app=new ap.AppManager(e,a),ap.ports.init(),ap.hardware.init(),ap.channels.init(),ap.app.init(),ap.appSize||ap.setSize(600,400)},ap.updateShader=!1,ap.updateFresh=!1,ap.updateShaderLimiter=0,ap.update=function(){ap.app?ap.ready&&((!ap.updateShader||ap.updateShaderLimiter<4)&&ap.updateShaderLimiter>0?(ap.app.update(),ap.ports.update(),ap.hardware.update(),ap.channels.update()):(ap.app.updateMainSourceShader(),ap.app.update(),ap.updateShaderLimiter=0,ap.updateShader=!1,ap.updateFresh=!1),ap.updateShaderLimiter++):console.log("AP Error: Need to call ap.init before ap.update.")},ap.pointPosition=[-400,-400,0],ap.setPointPosition=function(e,a,t){ap.pointPosition=[e,a,t],ap.pointCloud.position&&(ap.pointCloud.position.x=e,ap.pointCloud.position.y=a,ap.pointCloud.position.z=t)},ap.appSize,ap.setSize=function(e,a){ap.appSize=[e,a],ap.app&&(ap.app.glWidth=e,ap.app.glHeight=a,ap.app.readPixels&&(ap.app.pixels=new Uint8Array(4*ap.app.glWidth*ap.app.glHeight)),ap.app.renderer.setSize(ap.app.glWidth,ap.app.glHeight))},ap.updateNodePoints=function(){ap.app.updateGeometry(),ap.app.generateCoordsMap(),ap.app.createNodePointCloud()},ap.get=function(e,a,t,i){return a?ap.getUniform(e,a,t,i).value:ap.material.uniforms[e].value},ap.set=function(e,a,t,i,r){t?(ap.getUniform(e,t,i,r).value=a,ap.setObjProperty(e,a,t,i,r)):ap.material.uniforms[e].value=a},ap.getUniform=function(e,a,t,i){var r="_"+a;return t&&(r+="_"+t,i&&(r+="_"+i)),ap.material.uniforms[r+"_"+e]},ap.getObj=function(e,a,t){var i=ap.channels.channels[e-1];return a&&(i=i.pods[a-1],t&&(i=i.clips[t-1])),i},ap.setObj=function(e,a,t,i){t?i?ap.channels.channels[a-1].pods[t-1].clips[i-1]=e:ap.channels.channels[a-1].pods[t-1]=e:ap.channels.channels[a-1]=e},ap.getObjProperty=function(e,a,t,i){var r=ap.getObj(a,t,i);return r[e]},ap.setObjProperty=function(e,a,t,i,r){var p=ap.getObj(t,i,r);p[e]=a},ap.load=function(e){ap.channels.channels=e,ap.updateShader=!0,ap.updateFresh=!0},ap.stringify=function(){return JSON.stringify(ap.channels.channels)},ap.AppManager=function(e,a){this.glWidth=0,this.glHeight=0,this.sceneMain=e,this.renderer=a,this.cameraRTT,this.sceneRTT,this.rtTextureA,this.rtTextureB,this.rtToggle=!0,this.controls,this.camera,this.geoX=[],this.geoY=[],this.passIndex=[],this.fragmentShader,this.time=0,this.pixels,this.render=!0,this.readPixels=!1,this.nodeTexture=THREE.ImageUtils.loadTexture("images/nodeflare250.png"),this.coordsMap,this.altMap1,this.altMap2,this.plane=new THREE.PlaneBufferGeometry(ap.simSize,ap.simSize),ap.pointGeometry=new THREE.Geometry},ap.AppManager.prototype={init:function(){this.rtTextureA=new THREE.WebGLRenderTarget(ap.simSize,ap.simSize,{minFilter:THREE.NearestMipMapNearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBFormat}),this.rtTextureB=this.rtTextureA.clone(),this.cameraRTT=new THREE.OrthographicCamera(ap.simSize/-2,ap.simSize/2,ap.simSize/2,ap.simSize/-2,-1e4,1e4),this.sceneRTT=new THREE.Scene,ap.pointGeometry=new THREE.Geometry,ap.updateNodePoints(),this.readPixels&&(this.pixels=new Uint8Array(4*this.glWidth*this.glHeight))},update:function(){if(this.time+=ap.speed,this.render&&ap.ready&&(ap.material.uniforms._time.value=this.time,ap.material.uniforms._random.value=Math.random(),this.rtToggle?(ap.material.uniforms.u_prevCMap.value=this.rtTextureB,this.renderer.render(this.sceneRTT,this.cameraRTT,this.rtTextureA,!0),ap.pointMaterial.uniforms.u_colorMap.value=this.rtTextureA):(ap.material.uniforms.u_prevCMap.value=this.rtTextureA,this.renderer.render(this.sceneRTT,this.cameraRTT,this.rtTextureB,!0),ap.pointMaterial.uniforms.u_colorMap.value=this.rtTextureB),this.rtToggle=!this.rtToggle,this.updateTimePerClip(),this.readPixels)){this.renderer.render(this.sceneRTT,this.cameraRTT);var e=this.renderer.getContext();e.readPixels(0,0,this.glWidth,this.glHeight,e.RGBA,e.UNSIGNED_BYTE,this.pixels),this.renderer.clear()}},setSize:function(e,a){this.glWidth=e,this.glHeight=a},addPlanesForTesting:function(){testPlane=new THREE.PlaneBufferGeometry(2*ap.simSize,2*ap.simSize);var e=new THREE.ShaderMaterial({uniforms:{u_texture:{type:"t",value:this.rtTextureA}},vertexShader:ap.shaders.SimpleTextureShader.vertexShader,fragmentShader:ap.shaders.SimpleTextureShader.fragmentShader,depthWrite:!1}),a=new THREE.Mesh(testPlane,e);a.position.x=-600,this.sceneMain.add(a),e=new THREE.ShaderMaterial({uniforms:{u_texture:{type:"t",value:this.rtTextureB}},vertexShader:ap.shaders.SimpleTextureShader.vertexShader,fragmentShader:ap.shaders.SimpleTextureShader.fragmentShader,depthWrite:!1}),a=new THREE.Mesh(testPlane,e),a.position.x=-900,this.sceneMain.add(a),e=new THREE.ShaderMaterial({uniforms:{u_texture:{type:"t",value:this.coordsMap}},vertexShader:ap.shaders.SimpleTextureShader.vertexShader,fragmentShader:ap.shaders.SimpleTextureShader.fragmentShader,depthWrite:!1}),a=new THREE.Mesh(testPlane,e),a.position.x=-1200,this.sceneMain.add(a)},updateTimePerClip:function(){for(var e=0;e<ap.channels.channels.length;e++){var a=ap.channels.channels[e];if(a&&a.pods)for(var t=0;t<a.pods.length;t++){var i=a.pods[t];if(i&&i.clips)for(var r=0;r<i.clips.length;r++){var p=i.clips[r];p&&(ap.material.uniforms["_"+(e+1)+"_"+(t+1)+"_"+(r+1)+"_time"].value+=p.speed*ap.speed)}}}},updateGeometry:function(){this.geoX=[],this.geoY=[],this.passIndex=[],ap.pointGeometry=new THREE.Geometry;var a=0;for(e=0;e<ap.ports.getPorts().length;e++){var t=ap.ports.getPort(e+1);if(t&&t.nodes)for(i=0;i<t.nodes.length;i++){var r=new THREE.Vector3;r.x=t.nodes[i].x||0,r.y=t.nodes[i].y||0,r.z=t.nodes[i].z||0,ap.pointGeometry.vertices.push(r);var p=ap.simSize,n=(a+1)%p;0===n&&(n=p);var s=(a+2-n)/p;this.geoX.push(n/p-.5/p),this.geoY.push(1-s/p-.5/p),this.passIndex.push(a),a++}}},generateCoordsMap:function(){for(var e=new Float32Array(4*Math.pow(ap.simSize,2)),a=0,t=1e11,i=0,r=1e11,p=0,n=1e11,s=0,o=0,c=e.length;c>o;o+=4){var l=0,d=0,h=0;ap.pointGeometry.vertices[a]?(l=ap.pointGeometry.vertices[a].x,d=ap.pointGeometry.vertices[a].y,h=ap.pointGeometry.vertices[a].z,t=Math.min(t,l),i=Math.max(i,l),r=Math.min(r,d),p=Math.max(p,d),n=Math.min(n,h),s=Math.max(s,h),e[o+3]=1,a++):e[o+3]=0,e[o+0]=l,e[o+1]=d,e[o+2]=h}ap.channels.setPodPos(1,new ap.PodPosition(t,r,n,i-t,p-r,s-n)),this.coordsMap=new THREE.DataTexture(e,ap.simSize,ap.simSize,THREE.RGBAFormat,THREE.FloatType),this.coordsMap.minFilter=THREE.NearestFilter,this.coordsMap.magFilter=THREE.NearestFilter,this.coordsMap.needsUpdate=!0,this.coordsMap.flipY=!0,this.altMap1=new THREE.DataTexture(e,ap.simSize,ap.simSize,THREE.RGBAFormat,THREE.FloatType),this.altMap1.minFilter=THREE.NearestFilter,this.altMap1.magFilter=THREE.NearestFilter,this.altMap1.needsUpdate=!0,this.altMap1.flipY=!0},createNodePointCloud:function(){var e={a_geoX:{type:"f",value:this.geoX},a_geoY:{type:"f",value:this.geoY},a_index:{type:"f",value:this.passIndex}},a={u_colorMap:{type:"t",value:this.rtTextureA},u_texture:{type:"t",value:this.nodeTexture}};ap.pointMaterial=new THREE.ShaderMaterial({uniforms:merge(a,ap.shaders.PointCloudShader.uniforms),attributes:merge(e,ap.shaders.PointCloudShader.attributes),vertexShader:ap.shaders.PointCloudShader.vertexShader,fragmentShader:ap.shaders.PointCloudShader.fragmentShader,depthTest:!1,transparent:!0});var t="AP Nodes";this.sceneMain.getObjectByName(t)&&this.sceneMain.remove(ap.pointCloud),ap.pointCloud=new THREE.PointCloud(ap.pointGeometry,ap.pointMaterial),ap.pointCloud.sortParticles=!0,ap.pointCloud.name=t,ap.pointPosition&&(ap.pointCloud.position.x=ap.pointPosition[0],ap.pointCloud.position.y=ap.pointPosition[1],ap.pointCloud.position.z=ap.pointPosition[2]),this.sceneMain.add(ap.pointCloud),ap.pointGeometry.vertices.length>0&&(console.log("AP Nodes: "+ap.pointGeometry.vertices.length),ap.ready=!0)},updateMainSourceShader:function(){var e={_time:{type:"f",value:this.time},_random:{type:"f",value:Math.random()},u_coordsMap:{type:"t",value:this.coordsMap},u_prevCMap:{type:"t",value:this.rtTextureB},u_mapSize:{type:"f",value:ap.simSize}},a=ap.channels.generateSourceShader(),t="";ap.usePodUniforms&&(e.u_pos_id={type:"i",value:0},e.u_pos_x={type:"f",value:0},e.u_pos_y={type:"f",value:0},e.u_pos_z={type:"f",value:0},e.u_pos_w={type:"f",value:0},e.u_pos_h={type:"f",value:0},e.u_pos_d={type:"f",value:0},t+="uniform int u_pos_id;\n",t+="uniform float u_pos_x;\n",t+="uniform float u_pos_y;\n",t+="uniform float u_pos_z;\n",t+="uniform float u_pos_w;\n",t+="uniform float u_pos_h;\n",t+="uniform float u_pos_d;\n");for(var i in a.uniforms){var r=ap.getVariableTypeFromShorthand(a.uniforms[i].type);t+="uniform "+r+" "+i+";\n",e[i]=a.uniforms[i]}if(this.altMap1&&(t+="uniform sampler2D u_altMap1; vec4 ap_alt1; \n",e.u_altMap1={type:"t",value:this.altMap1}),this.altMap2&&(t+="uniform sampler2D u_altMap2; vec4 ap_alt2; \n",e.u_altMap2={type:"t",value:this.altMap2}),!ap.updateFresh&&ap.material)for(i in e)ap.material.uniforms[i]&&(e[i].value=ap.material.uniforms[i].value);this.fragmentShader=ap.MainShader.fragmentShader,this.fragmentShader=this.fragmentShader.replace("#INCLUDESHADERS",a.fragmentMain),this.fragmentShader=this.fragmentShader.replace("#INCLUDESHADERFUNCTIONS",a.fragmentFunctions),this.fragmentShader=this.fragmentShader.replace("#INCLUDESHADERUTILS",ap.shaders.ShaderUtils+t),this.fragmentShader=this.minFragmentShader(this.fragmentShader),ap.material=new THREE.ShaderMaterial({uniforms:e,vertexShader:ap.shaders.SimpleTextureShader.vertexShader,fragmentShader:this.fragmentShader}),ap.material.uniforms.u_coordsMap.value=this.coordsMap,ap.material.uniforms.u_prevCMap.value=this.rtTextureB,this.altMap1&&(ap.material.uniforms.u_altMap1.value=this.altMap1),this.altMap2&&(ap.material.uniforms.u_altMap2.value=this.altMap2);var p="SourceQuad",n=this.sceneRTT.getObjectByName(p);n&&this.sceneRTT.remove(n);var s=new THREE.Mesh(this.plane,ap.material);s.position.z=-100,s.name=p,this.sceneRTT.add(s)},minFragmentShader:function(e){return e=e.replace(/ap_alt/g,"_0"),e=e.replace(/ap_/g,"_"),e=e.replace(/_xyz/g,"_1"),e=e.replace(/hsv2rgb/g,"_2"),e=e.replace(/rgb2hsv/g,"_3"),e=e.replace(/offsetPos/g,"_4"),e=e.replace(/_rgb/g,"_5"),e=e.replace(/_hsv/g,"_6"),e=e.replace(/resolution/g,"_7"),e=e.replace(/superFunction/g,"_8"),e=e.replace(/checkBounds/g,"_9"),e=e.replace(/returnColor/g,"_91"),e=e.replace(/getPodSize/g,"_92"),e=e.replace(/getPodPos/g,"_93"),e=e.replace(/_lastRgb/g,"_94"),e=e.replace(/getPodScale/g,"_95"),e=e.replace(/getPodOffset/g,"_96")}},ap.ChannelManager=function(){this.channels=[],this.podpositions=[]},ap.ChannelManager.prototype={init:function(){},update:function(){for(var e=0;e<this.channels.length;e++){var a=this.channels[e];if(a&&a.pods)for(var t=0;t<a.pods.length;t++){var i=a.pods[t];if(i&&i.clips)for(var r=0;r<i.clips.length;r++){var p=i.clips[r];if(p){var n=ap.clips[p.id];n&&n.update&&ap.app.material&&n.update("_"+(e+1)+"_"+(t+1)+"_"+(r+1),ap.app.material.uniforms)}}}}},generateSourceShader:function(){function e(e,a){var t=e.match(new RegExp("^(?:\\w+\\W+){"+--a+"}(\\w+)"));return t&&t[1]}for(var a={},t={},i={},r={},p=this.generateSizingFunctions(),n="",s="",o="",c={},l="",d=0;d<this.channels.length;d++){var h=this.channels[d];h.address="_"+(d+1);var f=!1;if(h.type===ap.CHANNEL_TYPE_FX&&(f=!0),s+="if(_channel_mix>0.){ \n",a[h.address+"_mix"]={type:"f",value:h.mix},h&&h.pods)for(var _=0;_<h.pods.length;_++){var g=h.pods[_];g.address=h.address+"_"+(_+1),a[g.address+"_mix"]={type:"f",value:g.mix},a[g.address+"_blend"]={type:"f",value:g.blend};var m=!1;if(g.clips&&g.clips.length)for(var v=0;v<g.positionIds.length;v++){s+="//-- \n";var x=this.getPodPos(g.positionIds[v]);if(c!==x){c=x;var y="vec2("+x.w+", "+x.h+");";ap.usePodUniforms&&(y="vec2(getPodSize("+g.positionIds[v]+").x, getPodSize("+g.positionIds[v]+").y);"),l!==y&&(l=y,s+="resolution = "+y+" \n"),s+="ap_xyz = offsetPos(ap_xyz2, "+g.positionIds[v]+", ap_xyz.w);\n"}for(s+="if(_pod_mix > 0. && checkBounds(ap_xyz2, "+g.positionIds[v]+") > 0.){ \n",m=!0,u=0;u<g.clips.length;u++){var P=g.clips[u];if(P){var S=ap.clips[P.id];if(!i[g.clips[u].id]){i[g.clips[u].id]=!0;for(var T in S.constants)if(!t[T]){t[T]=1;var E=ap.getVariableTypeFromShorthand(S.constants[T].type);p+=E+" "+T+" = "+S.constants[T].value+";"}if(p+="\n",S.fragmentFunctions)for(var b=0;b<S.fragmentFunctions.length;b++){var M=S.fragmentFunctions[b].trim();M=e(M,1)+e(M,2)+e(M,3)+e(M,4)+e(M,5),r[M]||(r[M]=!0,p+=S.fragmentFunctions[b]+"\n")}n+="else if(id == "+S.id+"){\n",n+=S.fragmentMain.replace("gl_FragColor","returnColor"),n+="\n",n=n.replace(/gl_FragCoord/g,"ap_xyz"),n+="\n}\n"}if(P.address=g.address+"_"+(u+1),P.id.length>0&&S){for(var z in S.params)ap.setObjProperty(z,S.params[z].value,d+1,_+1,u+1),a[P.address+"_"+z]={type:"f",value:S.params[z].value};for(var N in S.properties)a[P.address+"_"+N]=S.properties[N];S.init&&S.init(P.address,a),a[P.address+"_mix"]={type:"f",value:P.mix},a[P.address+"_blend"]={type:"f",value:P.blend},a[P.address+"_time"]={type:"f",value:ap.app.time};for(var R=["0.","0.","0.","0.","0.","0.","0.","0.","0."],C=0;C<R.length;C++)S.params["p"+(C+1)]&&(R[C]=P.address+"_p"+(C+1));o="",P.posMap==ap.MAP_ALT1&&ap.app.altMap1&&(o+="ap_xyz = offsetPos(ap_alt1, "+g.positionIds[v]+", ap_xyz.w);\n"),o+="ap_rgb2 = superFunction(_clip_mix, "+S.id+", _fxIn, _clip_time, "+R[0]+","+R[1]+","+R[2]+","+R[3]+","+R[4]+","+R[5]+","+R[6]+","+R[7]+","+R[8]+");",o=o.replace(/gl_FragCoord/g,"ap_xyz");var w=ap.clips[P.id].fx;0===u?(o+="ap_rgb = ap_rgb2; \n",w||f?o+="ap_rgb = mix(ap_p, ap_rgb2, _clip_mix); \n":(m=f,o+="ap_rgb = ap_rgb * (_clip_mix); \n")):w||f?o+="ap_rgb = mix(ap_rgb, ap_rgb2, _clip_mix); \n":(o+="ap_rgb2 = ap_rgb2 * (_clip_mix); \n",o+="ap_rgb = blend(ap_rgb2, ap_rgb, _clip_blend); \n",m=f),o=o.replace(/_clip_/g,P.address+"_"),o=o.replace(/__/g,P.address+"_"),o=0===u?o.replace(/_fxIn/g,"ap_p"):o.replace(/_fxIn/g,"ap_rgb"),s+=o}}}m?s+="ap_p = mix(ap_p, ap_rgb, _pod_mix); \n":0===_?s+="ap_p = ap_rgb * (_pod_mix); \n":(s+="ap_rgb = ap_rgb * (_pod_mix); \n",s+="ap_p = blend(ap_p, ap_rgb, _pod_blend); \n"),s+="}"}s=s.replace(/_pod_/g,g.address+"_")+"\n"}0===d?s+="ap_c = ap_p = ap_p * (_channel_mix); \n":f?s+="ap_c = mix(ap_c, ap_p, _channel_mix); \n":(s+="ap_p = ap_p * (_channel_mix); \n",s+="ap_c = blend(ap_c, ap_p, 1.); \n"),s+="}",s=s.replace(/_channel_/g,h.address+"_")+"\n"}return n=n.slice(5,n.length),n="vec4 returnColor = vec4(0.,0.,0.,0.); if(_mi == 0.){return vec3(0.,0.,0.);} \n"+n,n+="return max(min(vec3(returnColor.x, returnColor.y, returnColor.z), vec3(1.0)), vec3(0.0)); \n",n="vec3 superFunction(float _mi, int id, vec3 _fxIn, float time, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9) { \n"+n+"}\n",p+=n,ap.app.altMap1&&(s="ap_alt1 = texture2D( u_altMap1, v_vUv);"+s),ap.app.altMap2&&(s="ap_alt2 = texture2D( u_altMap2, v_vUv);"+s),{uniforms:a,fragmentFunctions:p,fragmentMain:s+"\n"}},generateSizingFunctions:function(){var e="";ap.usePodUniforms&&(e+="if(d == u_pos_id){\n",e+="p = vec3(u_pos_x, u_pos_y, u_pos_z);\n",e+="}");for(var a=0;a<this.podpositions.length;a++)e+="else if(d == "+(a+1)+"){\n",e+="p = vec3("+this.podpositions[a].x+","+this.podpositions[a].y+","+this.podpositions[a].z+");\n",e+="}\n";ap.usePodUniforms||(e=e.slice(5,e.length)),e="vec3 p = vec3(0.,0.,0.); \n"+e,e+="return p; \n",e="vec3 getPodPos(int d) { \n"+e+"}\n";var t=e;for(e="",ap.usePodUniforms&&(e+="if(d == u_pos_id){\n",e+="p = vec3(u_pos_w, u_pos_h, u_pos_d);\n",e+="}"),a=0;a<this.podpositions.length;a++)e+="else if(d == "+(a+1)+"){\n",e+="p = vec3("+this.podpositions[a].w+","+this.podpositions[a].h+","+this.podpositions[a].d+");\n",e+="}\n";if(ap.usePodUniforms||(e=e.slice(5,e.length)),e="vec3 p = vec3(0.,0.,0.); \n"+e,e+="return p; \n",e="vec3 getPodSize(int d) { \n"+e+"}\n",t+=e,ap.useTransforms){for(e="",a=0;a<this.podpositions.length;a++)e+="else if(d == "+(a+1)+"){\n",e+="p = vec3("+this.podpositions[a].xt+","+this.podpositions[a].yt+","+this.podpositions[a].zt+");\n",e+="}\n";for(e=e.slice(5,e.length),e="vec3 p = vec3(0.,0.,0.); \n"+e,e+="return p; \n",e="vec3 getPodOffset(int d) { \n"+e+"}\n",t+=e,e="",a=0;a<this.podpositions.length;a++)e+="else if(d == "+(a+1)+"){\n",e+="p = vec4("+this.podpositions[a].xs+","+this.podpositions[a].ys+","+this.podpositions[a].zs+","+this.podpositions[a].flipmode+");\n",e+="}\n";e=e.slice(5,e.length),e="vec4 p = vec4(0.,0.,0.,0.); \n"+e,e+="return p; \n",e="vec4 getPodScale(int d) { \n"+e+"}\n",t+=e}return t+=["float checkBounds(vec4 b, int p)","{","vec3 s = getPodPos(p);","if(b.x >= s.x && b.y >= s.y && b.z >= s.z){ ","vec3 e = getPodSize(p);","if(b.x <= (e.x + s.x) && b.y <= (e.y + s.y) && b.z <= (e.z + s.z)) {","	return 1.;","}}","	return 0.;","}"].join("\n"),t+="vec4 offsetPos(vec4 b, int p, float w){\n",t+="vec3 c = getPodPos(p);\n",t+="float x = b.x - c.x;\n",t+="float y = b.y - c.y;\n",t+="float z = b.z - c.z;\n",t+="float t = x;\n",ap.useTransforms&&(t+="vec4 s = getPodScale(p);\n",t+="if(s.w == 1.){",t+="x=y;y=t;\n",t+="}else if(s.w == 2.){",t+="x=z;z=t;\n",t+="}else if(s.w == 3.){",t+="t=y;y=z;z=t;\n",t+="}\n",t+="vec3 d = getPodOffset(p);\n",t+="vec3 e = getPodSize(p);\n",t+="x += (e.x * 8. * (d.x - .5));\n",t+="y += (e.y * 8. * (d.y - .5));\n",t+="z += (e.z * 8. * (d.z - .5));\n",t+="x += (b.x - (e.x * .5 + c.x)) * (1.-(s.x * 2.))*8.;\n",t+="y += (b.y - (e.y * .5 + c.y)) * (1.-(s.y * 2.))*8.;\n",t+="z += (b.z - (e.z * .5 + c.z)) * (1.-(s.z * 2.))*8.;\n"),t+="return vec4(x, y, z, w);\n",t+="}\n"},setChannel:function(e,a){this.channels[e-1]=a},getChannel:function(e){return this.channels[e-1]},getChannels:function(){return this.channels},clearChannel:function(e){delete this.channels[e-1]},clearAllChannels:function(){this.channels=[]},clearAllPodsInChannel:function(e){delete this.channels[e-1].pods},setPodPos:function(e,a){this.podpositions[e-1]=a},getPodPos:function(e){return this.podpositions[e-1]?this.podpositions[e-1]:this.podpositions[0]},clearPodPos:function(e){delete this.podpositions[e-1]},clearAllPodPos:function(){this.podpositions=[]},setClip:function(e,a,t,i){return this.channels[e-1]?void(this.channels[e-1].pods[a-1]?this.channels[e-1].pods[a-1].clips[t-1]=i:this.channels[e-1].pods[a-1]=new Pod(1,1,ap.BLEND.Add,[i])):!1},clearClip:function(e,a,t){delete this.channels[e-1].pods[a-1].clips[t-1]},clearAllClipsInPod:function(e,a){delete this.channels[e-1].pods[a-1].clips}},ap.HardwareManager=function(){},ap.HardwareManager.prototype={init:function(){},update:function(){},importNodes:function(e,a,t,i,r,p){a=a||0,t=t||0,i=i||0,r=r||0,e.scale=e.scale||1;var n=p||e.scale;for(var s in e.hardwareunit){var o=e.hardwareunit[s];for(var c in o.ports){var l=o.ports[c];for(var d in l.nodes){var h=l.nodes[d];h.x=h.x||0,h.y=h.y||0,h.z=h.z||0,h.x*=n,h.y*=n,h.z*=n,h.x+=t,h.y+=i,h.z+=r}ap.ports.setNodes(l.portid+a,l.nodes)}}},addTestGrid:function(a,t,r){var p=[];for(e=0;e<24;e++)for(i=0;i<14;i++){var n={};n.x=30*e+t,n.y=30*i+r,n.z=0,p.push(n)}ap.ports.setNodes(a,p)},addTestPortsGrid:function(a,t,r){var p=830,n=1100,s=0,o=0;for(u=0;u<15;u++){var c=[];for(e=0;e<18;e++)for(i=0;i<24;i++){var l={};l.x=.26*(40*e+s-650+t),l.y=.26*(40*i+o+r),l.z=300*Math.random()-150,c.push(l)}var d=new ap.Port("port name "+d,ap.PORT_TYPE_KINET_1,null,null,c);ap.ports.setPort(u+a,d),s+=p,(u+2)%5==1&&(s=0,o+=n)}},addTestPortsGrid2:function(a,t,r){var p=[];for(e=0;e<70;e++)for(i=0;i<38;i++){var n={};n.x=20*e-340+t,n.y=20*i+30+r,p.push(n)}var s=new ap.Port("port name "+s,ap.PORT_TYPE_KINET_1,null,null,p);ap.ports.setPort(a,s)},addTestPortsGrid3:function(a,t,r){var p=[],n={};for(e=0;e<70;e++)for(i=0;i<38;i++)n={},n.x=20*e-340+t,n.y=20*i+30+r-1,p.push(n);var s=new ap.Port("port name "+s,ap.PORT_TYPE_KINET_1,null,null,p);for(ap.ports.setPort(a,s),p=[],e=0;e<70;e++)for(i=0;i<38;i++)(i+2)%2==1&&(n={},n.x=20*e-340+t,n.y=20*i+30+r,n.z=110,p.push(n));for(s=new ap.Port("port name "+s,ap.PORT_TYPE_KINET_1,null,null,p),ap.ports.setPort(a+1,s),p=[],e=0;e<70;e++)for(i=0;i<38;i++)(i-1)%3==1&&(e-1)%2==1&&(n={},n.x=20*e-340+t-1,n.y=20*i+30+r-1,n.z=210,p.push(n));s=new ap.Port("port name "+s,ap.PORT_TYPE_KINET_1,null,null,p),ap.ports.setPort(a+2,s)},addSimpleNodeGrid:function(a,t,r,p,n,s,o){var c=1e11,l=0,d=1e11,h=0,u=[];for(e=0;e<n;e++)for(i=0;i<s;i++){var f={};f.x=e*o+t,f.y=i*o+r,f.z=p,u.push(f),c=Math.min(c,f.x),l=Math.max(l,f.x),d=Math.min(d,f.y),h=Math.max(h,f.y)}var _=new ap.Port("port name "+a,ap.PORT_TYPE_KINET_1,null,null,u);ap.ports.setPort(a,_),a>1&&ap.channels.setPodPos(a,new ap.PodPosition(c,d,p,l-c,h-d,p+1))}},ap.PortManager=function(){this.ports=[]},ap.PortManager.prototype={init:function(){},update:function(){},getNodes:function(e){return this.ports[e-1].nodes},getNodeCount:function(e){return this.ports[e-1].nodes.length},setNodes:function(e,a){this.ports[e-1]||(this.ports[e-1]={}),this.ports[e-1].nodes=a},setNodesOffset:function(e,a,t,i,r){this.ports[e-1]||(this.ports[e-1]={});for(var p=0;p<a.length;p++)a[p].x+=t,a[p].y+=i,a[p].z+=r;this.ports[e-1].nodes=a},setNodesFlat:function(e,a,t){this.ports[e-1]||(this.ports[e-1]={});for(var i=0;i<a.length;i++)a[i].z=t;this.ports[e-1].nodes=a},clearNodes:function(e){delete this.ports[e-1].nodes},setPort:function(e,a){this.ports[e-1]=a},getPort:function(e){return this.ports[e-1]},getPorts:function(){return this.ports},addPortDetails:function(e,a){if(!this.ports[e-1])return void console.log("Error: Cannot add details to unexisting Port "+e);var t=this.ports[e-1].nodes,i={};for(var r in this.ports[e-1])this.ports[e-1][r]&&(i[r]=this.ports[e-1][r]);for(var p in a)a[p]&&(i[p]=a[p]);this.ports[e-1]=i,this.ports[e-1].nodes=t},clearPort:function(e){delete this.ports[e-1]},clearAllPorts:function(){delete this.ports,this.ports=[]}},ap.Channel=function(e){this.name=e.name,this.type=e.type||ap.CHANNEL_TYPE_ADD,this.mix=e.mix||0,this.blend=e.blend||ap.BLEND.Add,this.pods=e.pods||[]},ap.Clip=function(e){this.id=e.id,this.mix=e.mix||1,this.blend=e.blend||ap.BLEND.Add,this.posMap=e.posMap||ap.MAP_NORMAL,this.speed=e.speed||1,this.p1=e.p1||0,this.p2=e.p2||0,this.p3=e.p3||0,this.p4=e.p4||0,this.p5=e.p5||0,this.p6=e.p6||0,this.p7=e.p7||0,this.p8=e.p8||0,this.p9=e.p9||0},ap.Clip.prototype={setParams:function(e,a,t,i,r,p,n,s,o){this.p1=e,this.p2=a,this.p3=t,this.p4=i,this.p5=r,this.p6=p,this.p7=n,this.p8=s,this.p9=o}},ap.Pod=function(e){this.positionIds=e.positionIds||[],this.mix=e.mix||1,this.blend=e.blend||ap.BLEND.Add,this.clips=e.clips||[]},ap.PodPosition=function(e,a,t,i,r,p,n,s,o,c,l,d,h){this.x=e||0,this.y=a||0,this.z=t||0,this.w=i||0,this.h=r||0,this.d=p||0,this.xt=n||.5,this.yt=s||.5,this.zt=o||.5,this.xs=c||.5,this.ys=l||.5,this.zs=d||.5,this.flipmode=h||0},ap.Port=function(e,a,t,i,r){this.name=e,this.type=a,this.address=t||"",this.nodes=r||[],this.hardwarePort=i||1},ap.MainShader={fragmentShader:["#INCLUDESHADERUTILS","precision mediump float;","float ap_index;","vec4 ap_xyz;","vec4 ap_xyz2;","vec3 ap_lastRgb;","vec3 ap_rgb = vec3(0.);","vec3 ap_hsv;","vec3 ap_rgb2;","vec4 ap_rgbV4;","vec3 ap_c = vec3(0.);","vec3 ap_p = vec3(0.);","vec2 resolution;","float random;","varying vec2 v_vUv;","uniform float _time;","uniform float _random;","uniform float u_mapSize;","uniform sampler2D u_coordsMap;","uniform sampler2D u_prevCMap;","#define picu  31.006276680299820175476315067101 //pi cubed, pi^3","#define pisq  9.8696044010893586188344909998762 //pi squared, pi^2","#define twpi  6.283185307179586476925286766559  //two pi, 2*pi ","#define pi    3.1415926535897932384626433832795 //pi","#define prpi  1.4396194958475906883364908049738 //pi root of pi","#define trpi  1.0471975511965977461542144610932 //one third of pi, pi/3","#define lgpi  0.4971498726941338543512682882909 //log(pi)       ","#define rcpi  0.31830988618379067153776752674503// reciprocal of pi  , 1/pi  ","#INCLUDESHADERFUNCTIONS","void main() {","random = rand(vec2(gl_FragCoord[0] * (gl_FragCoord[2] + 1.), gl_FragCoord[1] * _random) * (_time * 0.0001));","ap_rgb = vec3(0.0);","ap_xyz2 = ap_xyz = texture2D( u_coordsMap, v_vUv);","if(ap_xyz[3] == 0.0){ discard; }","ap_index = ((1.0 - v_vUv.y) * u_mapSize * u_mapSize + v_vUv.x * u_mapSize);","ap_lastRgb = vec3(texture2D( u_prevCMap, v_vUv));","#INCLUDESHADERS","gl_FragColor = vec4(ap_c, 1.0);","}"].join("\n")},ap.shaders.PointCloudShader={uniforms:{u_pointSize:{type:"f",value:80}},attributes:{},vertexShader:["uniform float u_pointSize;","attribute float a_geoX;","attribute float a_geoY;","attribute float a_index;","varying float v_geoX;","varying float v_geoY;","varying float v_index;","void main() {","v_geoX = a_geoX;","v_geoY = a_geoY;","v_index = a_index;","vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","gl_PointSize = u_pointSize * ( 300.0 / length( mvPosition.xyz ) );","gl_Position = projectionMatrix * mvPosition;","}"].join("\n"),fragmentShader:["uniform sampler2D u_texture;","uniform sampler2D u_colorMap;","varying float v_geoX;","varying float v_geoY;","varying float v_index;","void main() {","gl_FragColor = texture2D( u_colorMap, vec2( v_geoX, v_geoY )) * texture2D( u_texture, gl_PointCoord);","}"].join("\n")},ap.shaders.ShaderUtils=["vec3 rgb2hsv(vec3 c){","vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);"," vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));","vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));","float d = q.x - min(q.w, q.y);","float e = 1.0e-10;","return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);","}","vec3 hsv2rgb(vec3 c) {","	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);","	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);","	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","vec3 blend(vec3 c1, vec3 c2, float type)","{","if(type == 0.0){ return c1; }else						","if(type == 1.0){ return c1 + c2; }else					","if(type == 2.0){ return c1 - c2; }else					","if(type == 3.0){ return min(c1, c2); }else				","if(type == 4.0){ return max(c1, c2); }else				","if(type == 5.0){ return abs(c2 - c1); }else				","if(type == 6.0){ return c1 + c2 - 2.0 * c1 * c2; }else	","if(type == 7.0){ return c1 * c2; }else					","if(type == 8.0){ return (c1 + c2) - (c1 * c2); }else	","if(type == 9.0){ return vec3((c2.r <= 0.5) ? (2.0 * c1.r * c2.r) : (1.0 - 2.0 * (1.0 - c2.r) * (1.0 - c1.r)),(c2.g <= 0.5) ? (2.0 * c1.g * c2.g) : (1.0 - 2.0 * (1.0 - c2.g) * (1.0 - c1.g)),(c2.b <= 0.5) ? (2.0 * c1.b * c2.b) : (1.0 - 2.0 * (1.0 - c2.b) * (1.0 - c1.b))); }else","if(type == 10.0){ return vec3((c1.r <= 0.5) ? (2.0 * c1.r * c2.r) : (1.0 - 2.0 * (1.0 - c1.r) * (1.0 - c2.r)),(c1.g <= 0.5) ? (2.0 * c1.g * c2.g) : (1.0 - 2.0 * (1.0 - c1.g) * (1.0 - c2.g)),(c1.b <= 0.5) ? (2.0 * c1.b * c2.b) : (1.0 - 2.0 * (1.0 - c1.b) * (1.0 - c2.b))); }else","if(type == 11.0){ return vec3((c1.r <= 0.5) ? (c2.r - (1.0 - 2.0 * c1.r) * c2.r * (1.0 - c2.r)) : (((c1.r > 0.5) && (c2.r <= 0.25)) ? (c2.r + (2.0 * c1.r - 1.0) * (4.0 * c2.r * (4.0 * c2.r + 1.0) * (c2.r - 1.0) + 7.0 * c2.r)) : (c2.r + (2.0 * c1.r - 1.0) * (sqrt(c2.r) - c2.r))),(c1.g <= 0.5) ? (c2.g - (1.0 - 2.0 * c1.g) * c2.g * (1.0 - c2.g)) : (((c1.g > 0.5) && (c2.g <= 0.25)) ? (c2.g + (2.0 * c1.g - 1.0) * (4.0 * c2.g * (4.0 * c2.g + 1.0) * (c2.g - 1.0) + 7.0 * c2.g)) : (c2.g + (2.0 * c1.g - 1.0) * (sqrt(c2.g) - c2.g))),(c1.b <= 0.5) ? (c2.b - (1.0 - 2.0 * c1.b) * c2.b * (1.0 - c2.b)) : (((c1.b > 0.5) && (c2.b <= 0.25)) ? (c2.b + (2.0 * c1.b - 1.0) * (4.0 * c2.b * (4.0 * c2.b + 1.0) * (c2.b - 1.0) + 7.0 * c2.b)) : (c2.b + (2.0 * c1.b - 1.0) * (sqrt(c2.b) - c2.b)))); }else","if(type == 12.0){ return vec3((c1.r == 1.0) ? 1.0 : min(1.0, c2.r / (1.0 - c1.r)),(c1.g == 1.0) ? 1.0 : min(1.0, c2.g / (1.0 - c1.g)),(c1.b == 1.0) ? 1.0 : min(1.0, c2.b / (1.0 - c1.b))); }else","if(type == 13.0){ return vec3((c1.r == 0.0) ? 0.0 : (1.0 - ((1.0 - c2.r) / c1.r)),(c1.g == 0.0) ? 0.0 : (1.0 - ((1.0 - c2.g) / c1.g)), (c1.b == 0.0) ? 0.0 : (1.0 - ((1.0 - c2.b) / c1.b))); }else","if(type == 14.0){ return (c1 + c2) - 1.0; }else","if(type == 15.0){ return 2.0 * c1 + c2 - 1.0; }else","if(type == 16.0){ return vec3((c1.r <= 0.5) ? (1.0 - (1.0 - c2.r) / (2.0 * c1.r)) : (c2.r / (2.0 * (1.0 - c1.r))),(c1.g <= 0.5) ? (1.0 - (1.0 - c2.g) / (2.0 * c1.g)) : (c2.g / (2.0 * (1.0 - c1.g))),(c1.b <= 0.5) ? (1.0 - (1.0 - c2.b) / (2.0 * c1.b)) : (c2.b / (2.0 * (1.0 - c1.b)))); }else","if(type == 17.0){ return vec3((c1.r > 0.5) ? max(c2.r, 2.0 * (c1.r - 0.5)) : min(c2.r, 2.0 * c1.r), (c1.r > 0.5) ? max(c2.g, 2.0 * (c1.g - 0.5)) : min(c2.g, 2.0 * c1.g),(c1.b > 0.5) ? max(c2.b, 2.0 * (c1.b - 0.5)) : min(c2.b, 2.0 * c1.b)); }else","{ return c1 + c2; }								","}","float rand(vec2 co)","{","  highp float a = 12.9898;","  highp float b = 78.233;","  highp float c = 43758.5453;","  highp float dt= dot(co.xy ,vec2(a,b));","  highp float sn= mod(dt,3.14);","  return fract(sin(sn) * c);","}"].join("\n"),ap.shaders.SimpleTextureShader={uniforms:{u_texture:{type:"t",value:null}},vertexShader:["varying vec2 v_vUv;","void main() {","v_vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["varying vec2 v_vUv;","uniform sampler2D u_texture;","void main() {","	gl_FragColor = texture2D( u_texture, v_vUv );","}"].join("\n")};